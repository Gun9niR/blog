[{"categories":["Web"],"content":"This article records my first attempt with mircro-service using Netflix Eureka as service register and discovery center, and Spring cloud Gateway as the API gateway. P.S. It’s so dumb that our instructor asked us to use Zuul as the gateway component, which has been deprecated since Spring Boot 2. ","date":"2021-10-15","objectID":"/posts/micro-service-21-10-15/:0:0","tags":["Microservice","Service Discovery","API Gateway"],"title":"Microservice: First attempt","uri":"/posts/micro-service-21-10-15/"},{"categories":["Web"],"content":"1. Service discovery A distributed system typically comprises a large number of services which communicate with each other to perform certain operations. Service discovery is the process of one service dynamically discovering the network location (IP address and port) of another service to communicate with it. ","date":"2021-10-15","objectID":"/posts/micro-service-21-10-15/:1:0","tags":["Microservice","Service Discovery","API Gateway"],"title":"Microservice: First attempt","uri":"/posts/micro-service-21-10-15/"},{"categories":["Web"],"content":"1.1. What is Eureka Eureka is a REST based service which is primarily used for acquiring information about services that you would want to communicate with. This REST service is also known as Eureka Server. The Services that register in Eureka Server to obtain information about each other are called Eureka Clients. The Eureka server knows all the client applications running on each port and IP address. When any of the Eureka clients want to communicate with another client, it can obtain the target IP address and the port via Eureka server. ","date":"2021-10-15","objectID":"/posts/micro-service-21-10-15/:1:1","tags":["Microservice","Service Discovery","API Gateway"],"title":"Microservice: First attempt","uri":"/posts/micro-service-21-10-15/"},{"categories":["Web"],"content":"1.2. Setting up Eureka in Spring Boot 1.2.1. Server # Server port should be the same as service zone. server.port=8040 spring.application.name=eureka-server eureka.instance.prefer-ip-address=true # No need to register the server itself. eureka.client.register-with-eureka=false eureka.client.fetch-registry=false eureka.client.service-url.defaultZone=http://localhost:8040/eureka ","date":"2021-10-15","objectID":"/posts/micro-service-21-10-15/:1:2","tags":["Microservice","Service Discovery","API Gateway"],"title":"Microservice: First attempt","uri":"/posts/micro-service-21-10-15/"},{"categories":["Web"],"content":"1.2.2. Microservice as Client spring.application.name=... # Setting prefer-ip-address to false will register instance with hostname. eureka.instance.prefer-ip-address=true eureka.client.register-with-eureka=true eureka.client.fetch-registry=true eureka.client.service-url.defaultZone=http://localhost:8040/eureka ","date":"2021-10-15","objectID":"/posts/micro-service-21-10-15/:1:3","tags":["Microservice","Service Discovery","API Gateway"],"title":"Microservice: First attempt","uri":"/posts/micro-service-21-10-15/"},{"categories":["Web"],"content":"2. Spring Cloud Gateway ","date":"2021-10-15","objectID":"/posts/micro-service-21-10-15/:2:0","tags":["Microservice","Service Discovery","API Gateway"],"title":"Microservice: First attempt","uri":"/posts/micro-service-21-10-15/"},{"categories":["Web"],"content":"2.1. How Gateway works As the images shows, when the gateway client sends a request to the gateway, the Gateway Handler Mapping decides if the url hits any of the patterns, and Gateway Handler takes care of the actual forwarding. The request then goes through a bunch of pre-filters, gets processed by the proxied service, and goes back through a bunch of post-filters. ","date":"2021-10-15","objectID":"/posts/micro-service-21-10-15/:2:1","tags":["Microservice","Service Discovery","API Gateway"],"title":"Microservice: First attempt","uri":"/posts/micro-service-21-10-15/"},{"categories":["Web"],"content":"2.2. Some pitfalls in implementation Use service discovery to avoid hard-coded service url With service discovery set up, we can just use service name to tell the gateway where to forward the request. @Bean public RouteLocator routeLocator(RouteLocatorBuilder builder) { return builder.routes() .route(\u003croute-id\u003e, r -\u003e r.path(\u003cpattern\u003e) .uri(\"lb://\u003cservice-name\u003e\")) .build(); } URL strip prefix In the scenario of Spring Cloud Gateway, the URI is forwarded in its entirety by default. This means the service name, which is normally intended only for identification of service, will also be included in the forwarded URI. To strip the service name, in java code we can add: @Bean public RouteLocator routeLocator(RouteLocatorBuilder builder) { return builder.routes() .route(\u003croute-id\u003e, r -\u003e r.path(\u003cpattern\u003e) .filters(f -\u003e f.stripPrefix(1)) .uri(\"lb://\u003cservice-name\u003e\")) .build(); } The parameter in stripPrefix indicates how many back slash separated segments of uri should be removed. Deduplicate CORS headers If both the gateway and the servie has added CORS headers to the response, then the error The ‘Access-Control-Allow-Origin’ header contains multiple values ‘…’, but only one is allowed. will be reported. This means we should only retain one set of CORS headers in the response by deduplication: @Bean public RouteLocator routeLocator(RouteLocatorBuilder builder) { return builder.routes() .route(\u003croute-id\u003e, r -\u003e r.path(\u003cpattern\u003e) .filters(f -\u003e f.stripPrefix(1) .dedupeResponseHeader(\"Access-Control-Allow-Credentials\", \"RETAIN_FIRST\") .dedupeResponseHeader(\"Access-Control-Allow-Origin\", \"RETAIN_FIRST\"))) .uri(\"lb://\u003cservice-name\u003e\")) .build(); } ","date":"2021-10-15","objectID":"/posts/micro-service-21-10-15/:2:2","tags":["Microservice","Service Discovery","API Gateway"],"title":"Microservice: First attempt","uri":"/posts/micro-service-21-10-15/"},{"categories":["Web"],"content":"This article records my first attempt with web service in course SE3353. ","date":"2021-10-12","objectID":"/posts/web-service-21-10-12/:0:0","tags":["Web Service","SOAP"],"title":"Web Service : First attempt","uri":"/posts/web-service-21-10-12/"},{"categories":["Web"],"content":"1. SOAP SOAP is an XML-based application-level protocol for accessing web services. It is normally sent on HTTP, but could be sent over SMTP or even FTP. Anatomy of SOAP protocol ","date":"2021-10-12","objectID":"/posts/web-service-21-10-12/:1:0","tags":["Web Service","SOAP"],"title":"Web Service : First attempt","uri":"/posts/web-service-21-10-12/"},{"categories":["Web"],"content":"1.1. SOAP vs REST They are not mutual-exclusive. Detailed comparison ","date":"2021-10-12","objectID":"/posts/web-service-21-10-12/:1:1","tags":["Web Service","SOAP"],"title":"Web Service : First attempt","uri":"/posts/web-service-21-10-12/"},{"categories":["Web"],"content":"2. WSDL WSDL, or Web Service Description Language, is an XML based definition language. It’s used for describing the functionality of a SOAP based web service, some important ones being: schema: Describes the parameters and return type of services. portType: Describes Name of the service The operations included in the service The input and output for each operation binding: Describes the transport protocol that the operations use. service: Describes address: Where to send HTTP request to call the webservice. ","date":"2021-10-12","objectID":"/posts/web-service-21-10-12/:2:0","tags":["Web Service","SOAP"],"title":"Web Service : First attempt","uri":"/posts/web-service-21-10-12/"},{"categories":["Web"],"content":"3. SOAP with JS Using SOAP with JS is quite troublesome, because the xml has to be hand-written or generated with third-party library, and there’s no tool to process WSDL (that I’ve found), you have to read it word by word. ","date":"2021-10-12","objectID":"/posts/web-service-21-10-12/:3:0","tags":["Web Service","SOAP"],"title":"Web Service : First attempt","uri":"/posts/web-service-21-10-12/"},{"categories":["Web"],"content":"3.1. Preflight OPTIONS request Using jquery.soap. Explanation1 GitHub Issue When sending xml with POST request, a preflight request will be sent using OPTIONS method. Solution ","date":"2021-10-12","objectID":"/posts/web-service-21-10-12/:3:1","tags":["Web Service","SOAP"],"title":"Web Service : First attempt","uri":"/posts/web-service-21-10-12/"},{"categories":["Web"],"content":"3.2. Request namespace The targetNamespace should be specified for a method call. In jquery.soap, just add: namespaceURL: \u003cyour-target-namespace\u003e In the parameters, namespace are also required (server side). See details. ","date":"2021-10-12","objectID":"/posts/web-service-21-10-12/:3:2","tags":["Web Service","SOAP"],"title":"Web Service : First attempt","uri":"/posts/web-service-21-10-12/"},{"categories":["Web"],"content":"3.3. CXF pitfalls Java class for complexType in xml must have setters to be generated properly. ","date":"2021-10-12","objectID":"/posts/web-service-21-10-12/:3:3","tags":["Web Service","SOAP"],"title":"Web Service : First attempt","uri":"/posts/web-service-21-10-12/"},{"categories":["Web"],"content":"3.4. Handling SOAP response xml with JS I’m using xml2json jquery plugin to parse xml to json. Pitfalls: When an xml array contains only one element, the library will parse it as a single object. All fields of the obejct are of type string. ","date":"2021-10-12","objectID":"/posts/web-service-21-10-12/:3:4","tags":["Web Service","SOAP"],"title":"Web Service : First attempt","uri":"/posts/web-service-21-10-12/"},{"categories":null,"content":"What my ID means You might be wondering what my ID means at first glance. Well, it’s actually an alias for Gungnir, the weapon of Odin in Norse mythology. Legend goes that it never misses its target, which sounds very kick-ass to me. But in reality, I’m nothing like Gungnir: I never consider it the end of the world not to accomplish my predefined task. I just try my best, and be happy with whatever I get. It’s my secret for keeping a healthy mindset, and recover from any setback. ","date":"2021-10-12","objectID":"/about/:1:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Education ","date":"2021-10-12","objectID":"/about/:2:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Shanghai Jiaotong University B.Eng in Software Engineering September 2019 — June 2023 (Expected) Shanghai, China Currently rank 1/99 (92.285/100) GPA 92.285/100 (or 4.0255/4.3), Rank 1/99 Important courses (98/100) CS154: Thinking and Approach of Programming (96/100) CS149: Data Structure (95/100) SE123: Principle and practice of software engineering (95/100) SE119: Introduction to Computer Systems (Organization) (94/100) SE120: Introduction to Computer Systems (System Software) (97/100) SE2321: Development of Internet Application (90/100) SE2322: Advanced Data Structure (90/100) SE128: Design and development of Internet products Other courses (96/100) ME116: Introduction to Engineering (99/100) EI203: Fundamental Circuit Theory (95/100) ME210: Engineering Practice (97/100) PH001: Physics I (98/100) MA119: Probability and Statistics (99/100) PH002: Physics II (97/100) EM215: Theoretical Mechanics ","date":"2021-10-12","objectID":"/about/:2:1","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Jianping High School High School September 2016 — June 2019 Shanghai, China ","date":"2021-10-12","objectID":"/about/:2:2","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Projects Basic – An elementary interpreter with GUI Jlox – A more serious interpreter with common programming language features LSM – LSM KV store Ray tracer – A basic ray tracer with antialiasing, defocus blur, motion blur, light source, importance sampling Kilo – A minial text editor that runs on terminal Comment Overflow (Code to be tidied up) – A cross-platform online forum mobile APP ","date":"2021-10-12","objectID":"/about/:3:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Skill ","date":"2021-10-12","objectID":"/about/:4:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Programming Languages Java, C++, JavaScript, C, Dart ","date":"2021-10-12","objectID":"/about/:4:1","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Middleware \u0026 Framework \u0026 Other techs Mobile APP development: Android native (Java), Flutter Web server: NGINX Web frontend: React Web backend: Spring Boot Database: MySQL, PostgreSQL, Redis, ElasticSearch Messaging: RabbitMQ DevOps: Docker, Prometheus, Loki, Grafana Desktop APP development: Qt ","date":"2021-10-12","objectID":"/about/:4:2","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"English CET-4: 664/710 (Top 1%) TOFEL: TBD GRE: TBD P.S. I cannot say I’m proficient with any of these techs, I have used them in my projects, that is all. ","date":"2021-10-12","objectID":"/about/:4:3","tags":null,"title":"About me","uri":"/about/"}]