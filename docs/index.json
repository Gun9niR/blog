[{"categories":["Web"],"content":"The bookstore project is not officially finished, so a lot of changes might happen. Github link for the entire project will be available after the project is concluded. ","date":"2021-11-30","objectID":"/posts/docker-bookstore-21-11-30/:0:0","tags":["Docker"],"title":"Dockerize Bookstore System","uri":"/posts/docker-bookstore-21-11-30/"},{"categories":["Web"],"content":"0. Why? As a wealth of components are being added to my bookstore system, it is growing increasingly complex, putting forward a few problems. Multiple middlewares and databases clutter up local storage, with configuration files, log files, data files scattered all over the place. The project becomes unwieldy to deploy. Even if I have most components automatically launch as a service at computer startup, I still have to open 3 Springboot projects, and launch them one by one. Because a locally installed middleware/database can only have one configuration file at a time, it is very difficult to use it for many applications simultaneously. In light of these shortcomings, I resort to Docker, which provides a convenient solution to them all. ","date":"2021-11-30","objectID":"/posts/docker-bookstore-21-11-30/:1:0","tags":["Docker"],"title":"Dockerize Bookstore System","uri":"/posts/docker-bookstore-21-11-30/"},{"categories":["Web"],"content":"1. Bookstore system components Just to obtain a big picture, my Bookstore system consist of the following components: Databases PostgreSQL (primary storage, with primary and backup) MongoDB (book description) Neo4j (book tags) ElasticSearch (full-text search) Redis (cache) Middleware RabbitMQ (asynchronous communication) Spring Cloud Gateway (HTTPS and load balancing) Eureka (service discovery) Logstash (synchronize data between PostgreSQL and ES) Application Springboot main service Some of these components have readily available images, while others warrant the use of Dockerfile, which is basically a file that specifies how an image should be built. ","date":"2021-11-30","objectID":"/posts/docker-bookstore-21-11-30/:2:0","tags":["Docker"],"title":"Dockerize Bookstore System","uri":"/posts/docker-bookstore-21-11-30/"},{"categories":["Web"],"content":"2. Building \u0026 Deployment overview The ultimate goal is to make the building and deployment process a one-or-two-liner, so I want as few files as possible for each stage. There are mainly three stages: Build any self-written code, which is all in Java, using maven Build Docker images if necessary, using one Dockerfile Deploy Docker containers either from self-made images or those from Docker Hub, using **. The file structure of my project looks like this ├── config │ └── ... ├── db │ └── ... ├── eureka │ └── ... ├── gateway │ └── ... ├── main-service │ └── ... ├── shared-data-access │ └── ... ├── build.sh ├── Dockerfile ├── docker-compose.yml └── pom.xml where: config stores configuration file and scripts for containers db stores persistent data eureka, gateway, main-service, shared-data-access are java modules to be built with pom.xml build.sh builds above Java modules and generate images with Dockerfile docker-compose.yml deploys the entire system ","date":"2021-11-30","objectID":"/posts/docker-bookstore-21-11-30/:3:0","tags":["Docker"],"title":"Dockerize Bookstore System","uri":"/posts/docker-bookstore-21-11-30/"},{"categories":["Web"],"content":"3. Building self-written code This is easily achievable with a one-liner: mvn clean install -Dmaven.test.skip=true -pl eureka,gateway,main-service -am -Dmaven.test.skip=true skips the tests, as some modules will not be able to pass the test (database connection failer) after their configuration files are modified for use within Docker container. pl specifies specific modules to build rather than the whole project, -am means also build projects required by building modules. Reference ","date":"2021-11-30","objectID":"/posts/docker-bookstore-21-11-30/:4:0","tags":["Docker"],"title":"Dockerize Bookstore System","uri":"/posts/docker-bookstore-21-11-30/"},{"categories":["Web"],"content":"4. Building images Had I been on an amd64 machine, this will be another one-liner, as spring-boot-maven-plugin takes care of it all. On an amd64 machine, just run mvn spring-boot:build-image -f pom.xml But the images generated by this command do not run on arm64 machine for some jdk incompatibility issues. So we need to define our own base image intended for arm64 machine. Luckily, this page contains various jdk images for arm64. With that in place, a Dockerfile can now be written to build the images. Assue all jar files have been built. FROMarm64v8/openjdk:17-jdk-oraclelinux7 as eurekaADD ./eureka/target/*.jar /eureka.jarEXPOSE8040ENTRYPOINT [\"java\", \"-jar\", \"/eureka.jar\"]FROMarm64v8/openjdk:17-jdk-oraclelinux7 as gatewayADD ./gateway/src/main/resources/keystore.p12 /keystore.p12ADD ./gateway/target/*.jar /gateway.jarEXPOSE8090ENTRYPOINT [\"java\", \"-jar\", \"/gateway.jar\"]FROMarm64v8/openjdk:17-jdk-oraclelinux7 as main-serviceADD ./main-service/target/*.jar /bookstore.jarEXPOSE8080ENTRYPOINT [\"java\", \"-jar\", \"/bookstore.jar\"]The Dockerfile can be executed with a script to be executed under project root directory. docker build --target eureka -t gun9nir/bookstore.eureka . docker build --target gateway -t gun9nir/bookstore.gateway . docker build --target main-service -t gun9nir/bookstore.main-service . ","date":"2021-11-30","objectID":"/posts/docker-bookstore-21-11-30/:5:0","tags":["Docker"],"title":"Dockerize Bookstore System","uri":"/posts/docker-bookstore-21-11-30/"},{"categories":["Web"],"content":"5. Communication among containers Reference An important advantage of Docker Compose over separate docker run commands is: By default Compose sets up a single network for your app. Each container for a service joins the default network and is both reachable by other containers on that network, and discoverable by them at a hostname identical to the container name. But since containers communicate with each other via conatiner name, the configuration files of each compoenent has to be changed, with ip/localhost changed to container name. ","date":"2021-11-30","objectID":"/posts/docker-bookstore-21-11-30/:6:0","tags":["Docker"],"title":"Dockerize Bookstore System","uri":"/posts/docker-bookstore-21-11-30/"},{"categories":["Web"],"content":"6. Dockerize components ","date":"2021-11-30","objectID":"/posts/docker-bookstore-21-11-30/:7:0","tags":["Docker"],"title":"Dockerize Bookstore System","uri":"/posts/docker-bookstore-21-11-30/"},{"categories":["Web"],"content":"6.1. PostgreSQL postgresql-primary:image:postgrescontainer_name:bookstore-postgresql-primaryports:- \"5432:5432\"environment:- POSTGRES_USER=gun9nir- POSTGRES_PASSWORD=guozhidong12- POSTGRES_DB=bookstorevolumes:- ./config/postgres-primary/postgresql.conf:/etc/postgresql/postgresql.conf- ./config/postgres-primary/pg_hba.conf:/etc/postgresql/pg_hba.conf- ./db/postgresql-primary/data:/var/lib/postgresql/data- ./config/postgres-primary/create_replicator.sh:/docker-entrypoint-initdb.d/create_replicator.shcommand:postgres -c config_file=/etc/postgresql/postgresql.conf -c hba_file=/etc/postgresql/pg_hba.confpostgresql-backup:image:postgrescontainer_name:bookstore-postgresql-backupports:- \"5433:5432\"restart:on-failureenvironment:- POSTGRES_USER=gun9nir- POSTGRES_PASSWORD=guozhidong12- POSTGRES_DB=bookstorevolumes:- ./config/postgres-backup/postgresql.conf:/etc/postgresql/postgresql.conf- ./config/postgres-backup/pg_hba.conf:/etc/postgresql/pg_hba.conf- ./db/postgresql-backup/data:/var/lib/postgresql/data- ./config/postgres-backup/init_backup.sh:/docker-entrypoint-initdb.d/init_backup.shcommand:postgres -c config_file=/etc/postgresql/postgresql.conf -c hba_file=/etc/postgresql/pg_hba.confA primary-backup configuration is adopted for high availability. To achieve that, in config directory are stored the respective configuration files and scripts for primary and backup. Two scripts are worth mentioning: #!/bin/bash psql -v ON_ERROR_STOP=1 --username gun9nir --dbname bookstore \u003c\u003c-EOSQL CREATE USER replicator; ALTER USER replicator WITH REPLICATION; EOSQL This script is run after primary database is created. It creates a replication user which has replication privilege to bookstore. Backups should use this user to initiate backup. #!/bin/bash rm -rf /var/lib/postgresql/data/* pg_basebackup -h postgresql-primary -D /var/lib/postgresql/data -U replicator -v -P -R This script is run after backup database is created. The data directory is cleard first, then the intial backup command is executed. The meaning of each argument is here. The most vital argument is -R. The containers automatically exit after first backup, thus the restart: on-failure option in Docker Compose file. ","date":"2021-11-30","objectID":"/posts/docker-bookstore-21-11-30/:7:1","tags":["Docker"],"title":"Dockerize Bookstore System","uri":"/posts/docker-bookstore-21-11-30/"},{"categories":["Web"],"content":"6.2. MongoDB mongodb:image:mongocontainer_name:bookstore-mongodbports:- \"27017:27017\"environment:- MONGO_INITDB_ROOT_USERNAME=\u003cusername\u003e- MONGO_INITDB_ROOT_PASSWORD=\u003cpwd\u003evolumes:- ./db/mongodb/data/db:/data/db","date":"2021-11-30","objectID":"/posts/docker-bookstore-21-11-30/:7:2","tags":["Docker"],"title":"Dockerize Bookstore System","uri":"/posts/docker-bookstore-21-11-30/"},{"categories":["Web"],"content":"6.3. Neo4j The official image of Neo4j does not support arm64 architecture, so an experimental version is used. neo4j:image:neo4j/neo4j-arm64-experimental:4.1.11-arm64container_name:bookstore-neo4jports:- \"7474:7474\"- \"7473:7473\"- \"7687:7687\"environment:- NEO4J_AUTH=\u003cusername\u003e/\u003cpwd\u003evolumes:- ./db/neo4j/data:/data","date":"2021-11-30","objectID":"/posts/docker-bookstore-21-11-30/:7:3","tags":["Docker"],"title":"Dockerize Bookstore System","uri":"/posts/docker-bookstore-21-11-30/"},{"categories":["Web"],"content":"6.4. ElasticSearch ES is very demanding in terms of memory. So extra settings are required. elasticsearch:image:docker.elastic.co/elasticsearch/elasticsearch:7.15.0container_name:bookstore-elasticsearchports:- \"9200:9200\"- \"9300:9300\"restart:on-failureenvironment:- discovery.type=single-node- xpack.security.enabled=true- ELASTIC_PASSWORD=guozhidong12- ES_JAVA_OPTS=-Xms512m -Xmx512m -XX:MaxMetaspaceSize=128mvolumes:- ./db/elasticsearch/data:/usr/share/elasticsearch/datadeploy:resources:limits:memory:1024M","date":"2021-11-30","objectID":"/posts/docker-bookstore-21-11-30/:7:4","tags":["Docker"],"title":"Dockerize Bookstore System","uri":"/posts/docker-bookstore-21-11-30/"},{"categories":["Web"],"content":"6.5. Redis redis:image:rediscontainer_name:redisports:- \"6379:6379\"volumes:- ./db/redis:/data","date":"2021-11-30","objectID":"/posts/docker-bookstore-21-11-30/:7:5","tags":["Docker"],"title":"Dockerize Bookstore System","uri":"/posts/docker-bookstore-21-11-30/"},{"categories":["Web"],"content":"6.6. RabbitMQ The management tag downloads rabbitmq with graphics interface enabled. rabbitmq:image:rabbitmq:managementcontainer_name:bookstore-rabbitmqports:- \"5672:5672\"- \"15672:15672\"environment:- RABBITMQ_DEFAULT_USER=gun9nir- RABBITMQ_DEFAULT_PASS=guozhidong12volumes:- ./db/rabbitmq/data:/var/lib/rabbitmq","date":"2021-11-30","objectID":"/posts/docker-bookstore-21-11-30/:7:6","tags":["Docker"],"title":"Dockerize Bookstore System","uri":"/posts/docker-bookstore-21-11-30/"},{"categories":["Web"],"content":"6.7. Spring Cloud Gateway gateway:image:docker.io/gun9nir/bookstore.gateway:latestcontainer_name:bookstore-gatewayports:- \"8090:8090\"One pitfall: the location of keystore file used by HTTPS in specified in application.yml, which cannot refer to anything within a jar file. So the keystore file needs to be copied into the image, thus ADD ./gateway/src/main/resources/keystore.p12 /keystore.p12 in Dockerfile. ","date":"2021-11-30","objectID":"/posts/docker-bookstore-21-11-30/:7:7","tags":["Docker"],"title":"Dockerize Bookstore System","uri":"/posts/docker-bookstore-21-11-30/"},{"categories":["Web"],"content":"6.8. Eureka eureka:image:docker.io/gun9nir/bookstore.eureka:latestcontainer_name:bookstore-eurekaports:- \"8040:8040\"","date":"2021-11-30","objectID":"/posts/docker-bookstore-21-11-30/:7:8","tags":["Docker"],"title":"Dockerize Bookstore System","uri":"/posts/docker-bookstore-21-11-30/"},{"categories":["Web"],"content":"6.9. Logstash logstash:image:docker.elastic.co/logstash/logstash:7.15.2container_name:bookstore-logstashrestart:on-failureenvironment:- XPACK_MONITORING_ELASTICSEARCH_HOSTS=http://bookstore-elasticsearch:9200volumes:- ./config/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml- ./config/logstash/pipeline:/usr/share/logstash/pipeline- ./config/logstash/postgresql-42.2.24.jar:/usr/share/logstash/logstash-core/lib/jars/postgresql-42.2.24.jar","date":"2021-11-30","objectID":"/posts/docker-bookstore-21-11-30/:7:9","tags":["Docker"],"title":"Dockerize Bookstore System","uri":"/posts/docker-bookstore-21-11-30/"},{"categories":["Web"],"content":"6.10. Main service There are two instances of main service, just to utilize the load balancing feature provided by gateway. Main service relies on ES to start properly, but ES takes extremely long to start, thus the timeout, and restart: on-failure:3. bookstore-1:image:gun9nir/bookstore.main-servicecontainer_name:bookstore-main-service-1restart:on-failure:3bookstore-2:image:gun9nir/bookstore.main-servicecontainer_name:bookstore-main-service-2restart:on-failure:3","date":"2021-11-30","objectID":"/posts/docker-bookstore-21-11-30/:7:10","tags":["Docker"],"title":"Dockerize Bookstore System","uri":"/posts/docker-bookstore-21-11-30/"},{"categories":["Web"],"content":"7. Deploy With all the preparations, building and deploying the project boils down to two commands. bash ./build.sh docker compose up -d ","date":"2021-11-30","objectID":"/posts/docker-bookstore-21-11-30/:8:0","tags":["Docker"],"title":"Dockerize Bookstore System","uri":"/posts/docker-bookstore-21-11-30/"},{"categories":["Web"],"content":"This article records my first attempt with mircro-service using Netflix Eureka as service register and discovery center, and Spring cloud Gateway as the API gateway. P.S. It’s so dumb that our instructor asked us to use Zuul as the gateway component, which has been deprecated since Spring Boot 2. ","date":"2021-10-15","objectID":"/posts/micro-service-21-10-15/:0:0","tags":["Microservice","Service Discovery","API Gateway"],"title":"Microservice: First attempt","uri":"/posts/micro-service-21-10-15/"},{"categories":["Web"],"content":"1. Service discovery A distributed system typically comprises a large number of services which communicate with each other to perform certain operations. Service discovery is the process of one service dynamically discovering the network location (IP address and port) of another service to communicate with it. ","date":"2021-10-15","objectID":"/posts/micro-service-21-10-15/:1:0","tags":["Microservice","Service Discovery","API Gateway"],"title":"Microservice: First attempt","uri":"/posts/micro-service-21-10-15/"},{"categories":["Web"],"content":"1.1. What is Eureka Eureka is a REST based service which is primarily used for acquiring information about services that you would want to communicate with. This REST service is also known as Eureka Server. The Services that register in Eureka Server to obtain information about each other are called Eureka Clients. The Eureka server knows all the client applications running on each port and IP address. When any of the Eureka clients want to communicate with another client, it can obtain the target IP address and the port via Eureka server. ","date":"2021-10-15","objectID":"/posts/micro-service-21-10-15/:1:1","tags":["Microservice","Service Discovery","API Gateway"],"title":"Microservice: First attempt","uri":"/posts/micro-service-21-10-15/"},{"categories":["Web"],"content":"1.2. Setting up Eureka in Spring Boot 1.2.1. Server # Server port should be the same as service zone. server.port=8040 spring.application.name=eureka-server eureka.instance.prefer-ip-address=true # No need to register the server itself. eureka.client.register-with-eureka=false eureka.client.fetch-registry=false eureka.client.service-url.defaultZone=http://localhost:8040/eureka ","date":"2021-10-15","objectID":"/posts/micro-service-21-10-15/:1:2","tags":["Microservice","Service Discovery","API Gateway"],"title":"Microservice: First attempt","uri":"/posts/micro-service-21-10-15/"},{"categories":["Web"],"content":"1.2.2. Microservice as Client spring.application.name=... # Setting prefer-ip-address to false will register instance with hostname. eureka.instance.prefer-ip-address=true eureka.client.register-with-eureka=true eureka.client.fetch-registry=true eureka.client.service-url.defaultZone=http://localhost:8040/eureka ","date":"2021-10-15","objectID":"/posts/micro-service-21-10-15/:1:3","tags":["Microservice","Service Discovery","API Gateway"],"title":"Microservice: First attempt","uri":"/posts/micro-service-21-10-15/"},{"categories":["Web"],"content":"2. Spring Cloud Gateway ","date":"2021-10-15","objectID":"/posts/micro-service-21-10-15/:2:0","tags":["Microservice","Service Discovery","API Gateway"],"title":"Microservice: First attempt","uri":"/posts/micro-service-21-10-15/"},{"categories":["Web"],"content":"2.1. How Gateway works As the images shows, when the gateway client sends a request to the gateway, the Gateway Handler Mapping decides if the url hits any of the patterns, and Gateway Handler takes care of the actual forwarding. The request then goes through a bunch of pre-filters, gets processed by the proxied service, and goes back through a bunch of post-filters. ","date":"2021-10-15","objectID":"/posts/micro-service-21-10-15/:2:1","tags":["Microservice","Service Discovery","API Gateway"],"title":"Microservice: First attempt","uri":"/posts/micro-service-21-10-15/"},{"categories":["Web"],"content":"2.2. Some pitfalls in implementation Use service discovery to avoid hard-coded service url With service discovery set up, we can just use service name to tell the gateway where to forward the request. @Bean public RouteLocator routeLocator(RouteLocatorBuilder builder) { return builder.routes() .route(\u003croute-id\u003e, r -\u003e r.path(\u003cpattern\u003e) .uri(\"lb://\u003cservice-name\u003e\")) .build(); } URL strip prefix In the scenario of Spring Cloud Gateway, the URI is forwarded in its entirety by default. This means the service name, which is normally intended only for identification of service, will also be included in the forwarded URI. To strip the service name, in java code we can add: @Bean public RouteLocator routeLocator(RouteLocatorBuilder builder) { return builder.routes() .route(\u003croute-id\u003e, r -\u003e r.path(\u003cpattern\u003e) .filters(f -\u003e f.stripPrefix(1)) .uri(\"lb://\u003cservice-name\u003e\")) .build(); } The parameter in stripPrefix indicates how many back slash separated segments of uri should be removed. Deduplicate CORS headers If both the gateway and the servie has added CORS headers to the response, then the error The ‘Access-Control-Allow-Origin’ header contains multiple values ‘…’, but only one is allowed. will be reported. This means we should only retain one set of CORS headers in the response by deduplication: @Bean public RouteLocator routeLocator(RouteLocatorBuilder builder) { return builder.routes() .route(\u003croute-id\u003e, r -\u003e r.path(\u003cpattern\u003e) .filters(f -\u003e f.stripPrefix(1) .dedupeResponseHeader(\"Access-Control-Allow-Credentials\", \"RETAIN_FIRST\") .dedupeResponseHeader(\"Access-Control-Allow-Origin\", \"RETAIN_FIRST\"))) .uri(\"lb://\u003cservice-name\u003e\")) .build(); } ","date":"2021-10-15","objectID":"/posts/micro-service-21-10-15/:2:2","tags":["Microservice","Service Discovery","API Gateway"],"title":"Microservice: First attempt","uri":"/posts/micro-service-21-10-15/"},{"categories":["Web"],"content":"This article records my first attempt with web service in course SE3353. ","date":"2021-10-12","objectID":"/posts/web-service-21-10-12/:0:0","tags":["Web Service","SOAP"],"title":"Web Service : First attempt","uri":"/posts/web-service-21-10-12/"},{"categories":["Web"],"content":"1. SOAP SOAP is an XML-based application-level protocol for accessing web services. It is normally sent on HTTP, but could be sent over SMTP or even FTP. Anatomy of SOAP protocol ","date":"2021-10-12","objectID":"/posts/web-service-21-10-12/:1:0","tags":["Web Service","SOAP"],"title":"Web Service : First attempt","uri":"/posts/web-service-21-10-12/"},{"categories":["Web"],"content":"1.1. SOAP vs REST They are not mutual-exclusive. Detailed comparison ","date":"2021-10-12","objectID":"/posts/web-service-21-10-12/:1:1","tags":["Web Service","SOAP"],"title":"Web Service : First attempt","uri":"/posts/web-service-21-10-12/"},{"categories":["Web"],"content":"2. WSDL WSDL, or Web Service Description Language, is an XML based definition language. It’s used for describing the functionality of a SOAP based web service, some important ones being: schema: Describes the parameters and return type of services. portType: Describes Name of the service The operations included in the service The input and output for each operation binding: Describes the transport protocol that the operations use. service: Describes address: Where to send HTTP request to call the webservice. ","date":"2021-10-12","objectID":"/posts/web-service-21-10-12/:2:0","tags":["Web Service","SOAP"],"title":"Web Service : First attempt","uri":"/posts/web-service-21-10-12/"},{"categories":["Web"],"content":"3. SOAP with JS Using SOAP with JS is quite troublesome, because the xml has to be hand-written or generated with third-party library, and there’s no tool to process WSDL (that I’ve found), you have to read it word by word. ","date":"2021-10-12","objectID":"/posts/web-service-21-10-12/:3:0","tags":["Web Service","SOAP"],"title":"Web Service : First attempt","uri":"/posts/web-service-21-10-12/"},{"categories":["Web"],"content":"3.1. Preflight OPTIONS request Using jquery.soap. Explanation1 GitHub Issue When sending xml with POST request, a preflight request will be sent using OPTIONS method. Solution ","date":"2021-10-12","objectID":"/posts/web-service-21-10-12/:3:1","tags":["Web Service","SOAP"],"title":"Web Service : First attempt","uri":"/posts/web-service-21-10-12/"},{"categories":["Web"],"content":"3.2. Request namespace The targetNamespace should be specified for a method call. In jquery.soap, just add: namespaceURL: \u003cyour-target-namespace\u003e In the parameters, namespace are also required (server side). See details. ","date":"2021-10-12","objectID":"/posts/web-service-21-10-12/:3:2","tags":["Web Service","SOAP"],"title":"Web Service : First attempt","uri":"/posts/web-service-21-10-12/"},{"categories":["Web"],"content":"3.3. CXF pitfalls Java class for complexType in xml must have setters to be generated properly. ","date":"2021-10-12","objectID":"/posts/web-service-21-10-12/:3:3","tags":["Web Service","SOAP"],"title":"Web Service : First attempt","uri":"/posts/web-service-21-10-12/"},{"categories":["Web"],"content":"3.4. Handling SOAP response xml with JS I’m using xml2json jquery plugin to parse xml to json. Pitfalls: When an xml array contains only one element, the library will parse it as a single object. All fields of the obejct are of type string. ","date":"2021-10-12","objectID":"/posts/web-service-21-10-12/:3:4","tags":["Web Service","SOAP"],"title":"Web Service : First attempt","uri":"/posts/web-service-21-10-12/"},{"categories":null,"content":"Education ","date":"2021-10-12","objectID":"/about/:1:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Shanghai Jiaotong University B.Eng in Software Engineering September 2019 — June 2023 (Expected) Shanghai, China GPA 92.369/100 (or 4.03/4.3), Rank 1/99 Major courses (98/100) CS154: Thinking and Approach of Programming (96/100) CS149: Data Structure (97/100) SE127: Software Basic Practice (95/100) SE123: Principle and Practice of Software Engineering (99/100) SE119: Introduction to Computer Systems (Assembly) (95/100) SE119: Introduction to Computer Systems (Organization) (94/100) SE120: Introduction to Computer Systems (System Software) (97/100) SE2321: Development of Internet Application (90/100) SE2322: Advanced Data Structure (90/100) SE128: Design and development of Internet products (95/100) SE124: Computer System Engineering (95/100) SE3355: Compilers (98/100) SE3353: Architecture of Application Systems (91/100) SE125: Machine Learning (90/100) SE3352: Algorithm Design (92/100) SE213: Software testing (99/100) SE3356: Cloud Operating System Design and Practice (93/100) SE3357: Operating System Misc courses (96/100) ME116: Introduction to Engineering (99/100) EI203: Fundamental Circuit Theory (95/100) ME210: Engineering Practice (97/100) PH001: Physics I (98/100) MA119: Probability and Statistics (99/100) PH002: Physics II (97/100) EM215: Theoretical Mechanics ","date":"2021-10-12","objectID":"/about/:1:1","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Jianping High School High School September 2016 — June 2019 Shanghai, China ","date":"2021-10-12","objectID":"/about/:1:2","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Internship Experience ","date":"2021-10-12","objectID":"/about/:2:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Metabit Trading Data System Engineering Intern, Data Infra Team, Feb 2022 - Now Implemented a redis client that is around 5x faster than redis-plus-plus in our use cases by taking advantage of parallelism. Implemented the cache layer of the storage platform MarketFS based on a redis cluster, which improved the system throughput by 5x and reduced the memory consumption by 4x. ","date":"2021-10-12","objectID":"/about/:2:1","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Projects Basic – An elementary interpreter with GUI Jlox – A more serious interpreter with common programming language features LSM – LSM KV store Ray tracer – A basic ray tracer with antialiasing, defocus blur, motion blur, light source, importance sampling Kilo – A minial text editor that runs on terminal Comment Overflow – A cross-platform forum APP Kuberboat – A simplified implementation of Kubernetes ","date":"2021-10-12","objectID":"/about/:3:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Skills ","date":"2021-10-12","objectID":"/about/:4:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Programming Languages C++, Java, Go, JavaScript, Python, Dart ","date":"2021-10-12","objectID":"/about/:4:1","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Development Skills Mobile Development (Flutter, Android native), Databases (MySQL, PostgreSQL, Redis), Front-end (React), Back-end (Spring Boot, nginx, etc), DevOps (Docker, Kubernetes, Prometheus, Loki, Grafana, etc) ","date":"2021-10-12","objectID":"/about/:4:2","tags":null,"title":"About me","uri":"/about/"}]